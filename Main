package com.example.testing;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;
import java.io.IOException;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import java.net.URL;
import java.util.*;
public class RouteNavigatorGUI extends Application {
    private WeightedGraphs graph = new WeightedGraphs();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Route Navigator");

        // Load graph from file
        String filename = "MAPSDATA.txt";
        try {
            graph.loadGraphFromFile(filename);
        } catch (IOException e) {
            showErrorDialog("File Error", "Failed to load graph data from " + filename);
            return;
        }

        // Layout
        VBox root = new VBox(10);
        root.setPadding(new Insets(10));

        // Main content box (white with padding and rounded corners)
        VBox inputBox = new VBox(10);
        /* inputBox.setStyle("-fx-background-color: white; -fx-padding: 20px; -fx-background-radius: 10px;");*/

        // Input fields
        Label sourceLabel = new Label("Enter Source Node:");
        TextField sourceField = new TextField();
        sourceField.setPromptText("Source");
        sourceField.setStyle("-fx-background-radius: 15px; -fx-padding: 10px;");

        Label destinationLabel = new Label("Enter Destination Node:");
        TextField destinationField = new TextField();
        destinationField.setPromptText("Destination");
        destinationField.setStyle("-fx-background-radius: 15px; -fx-padding: 10px;");

        // Button
        Button findPathButton = new Button("Navigate");

        // Output area (lavender box)
        TextArea outputArea = new TextArea();
        outputArea.setEditable(false);
        outputArea.setPrefHeight(200);

// Apply the CSS class (this ensures the styling from the CSS file is applied)
        outputArea.getStyleClass().add("output-area");

        // Add components to input box
        inputBox.getChildren().addAll(sourceLabel, sourceField, destinationLabel, destinationField, findPathButton, outputArea);

        // Lower vehicle options box (white box at the bottom)
        HBox vehicleBox = new HBox(20);
        vehicleBox.setStyle("-fx-background-color: #87CEEB; -fx-padding: 10px; -fx-background-radius: 10px;");

        // Vehicle options (bus, car, bike)
        Label busLabel =new Label("Bus - 5 min" );
        Label carLabel = new Label("Car - 10 min");
        Label bikeLabel = new Label("Bike - 3 min");




        // Add both input box and vehicle box to the root layout
        root.getChildren().addAll(inputBox, vehicleBox);

        // Button action
        findPathButton.setOnAction(e -> {
            String source = sourceField.getText().trim();
            String destination = destinationField.getText().trim();

            if (source.isEmpty() || destination.isEmpty()) {
                showErrorDialog("Input Error", "Please enter both source and destination nodes.");
                return;
            }

            if (!graph.nodeExists(source) || !graph.nodeExists(destination)) {
                showErrorDialog("Node Error", "One or both nodes do not exist in the graph.");
                return;
            }
            vehicleBox.getChildren().addAll(busLabel, carLabel, bikeLabel);
            // Run Dijkstra's algorithm
            String result = runDijkstra(source, destination);
            outputArea.setText(result);
        });

        // Set the scene and show the stage
        Scene scene = new Scene(root, 500, 500);
        URL cssUrl = getClass().getResource("/styles.css");
        if (cssUrl == null) {
            System.out.println("CSS file not found!");
        } else {
            scene.getStylesheets().add(cssUrl.toExternalForm());
            System.out.println("File found");
        }
        /*  scene.getStylesheets().add(getClass().getResource("styles.css").toExternalForm()); // Add custom CSS file*/
        primaryStage.setScene(scene);
        primaryStage.show();
        /* scene.getStylesheets().add(getClass().getResource("/styles.css").toExternalForm());*/

    }

    private String runDijkstra(String start, String destination) {
        Map<String, Integer> distances = new HashMap<>();
        Map<String, String> previous = new HashMap<>();
        PriorityQueue<String> queue = new PriorityQueue<>(Comparator.comparingInt(distances::get));

        for (String vertex : graph.vertices) {
            distances.put(vertex, Integer.MAX_VALUE);
            previous.put(vertex, null);
        }
        distances.put(start, 0);
        queue.add(start);

        while (!queue.isEmpty()) {
            String current = queue.poll();

            if (current.equals(destination)) break;

            for (Map.Entry<String, Integer> neighbor : graph.adj.getOrDefault(current, Collections.emptyMap()).entrySet()) {
                String neighborVertex = neighbor.getKey();
                int weight = neighbor.getValue();

                int newDist = distances.get(current) + weight;
                if (newDist < distances.get(neighborVertex)) {
                    distances.put(neighborVertex, newDist);
                    previous.put(neighborVertex, current);
                    queue.add(neighborVertex);
                }
            }
        }

        // Reconstruct the path
        List<String> path = new ArrayList<>();
        for (String at = destination; at != null; at = previous.get(at)) {
            path.add(at);
        }
        Collections.reverse(path);

        // Build the output string
        if (distances.get(destination) == Integer.MAX_VALUE) {
            return "No path found from " + start + " to " + destination;
        }

        return "Shortest Path: " + String.join(" -> ", path) + "\nDistance in km: " + distances.get(destination);
    }

    private void showErrorDialog(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
